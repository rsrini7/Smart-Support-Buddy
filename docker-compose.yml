
services:
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    environment:
      - PYTHONUNBUFFERED=1
    env_file:
      - ./backend/.env.docker
    volumes:
      - ./backend:/app
      - ./backend/data:/app/data
    ports:
      - "9000:9000"
    networks:
      - app_network
    depends_on:
      - chroma
      - jira
      - postgres

  chroma:
    image: chromadb/chroma:latest
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
      - PERSIST_DIRECTORY=/chroma/data
    volumes:
      - ./backend/data/vectordb:/chroma/data
    ports:
      - "8000:8000"
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3

  jira:
    image: atlassian/jira-software:10-ubuntu-jdk17 # Use a specific version
    container_name: jira
    environment:
      # REMOVED DB specific vars as dbconfig.xml handles it now
      # - ATL_JDBC_URL=...
      # - ATL_JDBC_USER=...
      # - ATL_JDBC_PASSWORD=...
      # - ATL_DB_DRIVER=...
      # - ATL_DB_TYPE=... # This is now in dbconfig.xml

      # Keep JVM settings
      - JVM_MINIMUM_MEMORY=1024m
      - JVM_MAXIMUM_MEMORY=2048m

      # (Optional) Set Timezone if needed
      # - TZ=America/New_York

    volumes:
      # Data Volume Mount (CRITICAL - Where setup files need to go)
      - jira_data:/var/atlassian/application-data/jira

      # Mount setup files INTO the Jira Home Directory (within the data volume)
      - ./jira-setup-files/dbconfig.xml:/var/atlassian/application-data/jira/dbconfig.xml
      - ./jira-setup-files/jira-response.varfile:/var/atlassian/application-data/jira/jira-response.varfile:ro
      - ./jira-setup-files/jira-config.properties:/var/atlassian/application-data/jira/jira-config.properties:ro

      # Mount server.xml into the Tomcat config directory (as before)
      - ./jira-config/server.xml:/opt/atlassian/jira/conf/server.xml:ro

    ports:
      - "9090:8080"
    networks:
      - app_network
    depends_on:
      postgres: # Ensure postgres service definition exists
          condition: service_healthy # Optional: Wait for DB healthcheck if defined

  postgres:
    image: postgres:13-alpine # Use a specific version
    container_name: postgres
    environment:
      - POSTGRES_DB=jira
      - POSTGRES_USER=jira
      - POSTGRES_PASSWORD=jirapass # Use secrets in production!
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app_network
    # Optional: Add healthcheck so Jira can wait for DB to be ready
    healthcheck:
        test: ["CMD-SHELL", "pg_isready -U jira -d jira"]
        interval: 10s
        timeout: 5s
        retries: 5

volumes:
  jira_data:
  postgres_data:

networks:
  app_network:
    driver: bridge