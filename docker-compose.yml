services:
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    environment:
      - PYTHONUNBUFFERED=1
    env_file:
      - ./backend/.env.docker
    volumes:
      - ./backend:/app
      - ./backend/data:/app/data
    ports:
      - "9000:9000"
    networks:
      - app_network
    depends_on:
      - chroma
      - jira
      - postgres

  chroma:
    image: chromadb/chroma:latest
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
      - PERSIST_DIRECTORY=/chroma/data
    volumes:
      - ./backend/data/vectordb:/chroma/data
    ports:
      - "8000:8000"
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3

  chroma-admin:
    image: fengzhichao/chromadb-admin
    ports:
      - "4000:3000"
    networks:
      - app_network
    depends_on:
      - chroma

  jira:
    image: atlassian/jira-software:10-ubuntu-jdk17 # Use a specific version
    container_name: jira
    environment:
      - JVM_MINIMUM_MEMORY=1024m
      - JVM_MAXIMUM_MEMORY=2048m
    volumes:
      - jira_data:/var/atlassian/application-data/jira
      - ./jira-setup-files/dbconfig.xml:/var/atlassian/application-data/jira/dbconfig.xml
      - ./jira-setup-files/jira-response.varfile:/var/atlassian/application-data/jira/jira-response.varfile:ro
      - ./jira-setup-files/jira-config.properties:/var/atlassian/application-data/jira/jira-config.properties:ro
      - ./jira-config/server.xml:/opt/atlassian/jira/conf/server.xml:ro
    ports:
      - "9090:8080"
    networks:
      - app_network
    depends_on:
      postgres:
          condition: service_healthy

  confluence:
    image: atlassian/confluence:7.19
    container_name: confluence
    ports:
      - "8090:8090"
      - "8091:8091"
    volumes:
      - confluence-data:/var/atlassian/application-data/confluence
      - ./confluence-setup-files/dbconfig.xml:/var/atlassian/application-data/confluence/dbconfig.xml
      - ./confluence-setup-files/confluence-response.varfile:/var/atlassian/application-data/confluence/confluence-response.varfile:ro
      - ./confluence-setup-files/confluence-config.properties:/var/atlassian/application-data/confluence/confluence-config.properties:ro
      - ./confluence-config/server.xml:/opt/atlassian/confluence/conf/server.xml:ro
    environment:
      - ATL_JDBC_URL=jdbc:postgresql://postgres:5432/confluence
      - ATL_JDBC_USER=confluence
      - ATL_JDBC_PASSWORD=confluence
      - ATL_DB_TYPE=postgresql
      - JVM_MINIMUM_MEMORY=1024m
      - JVM_MAXIMUM_MEMORY=2048m
      - CONFLUENCE_HOME=/var/atlassian/application-data/confluence
      - CONFLUENCE_INSTALL_DIR=/opt/atlassian/confluence
      - ATL_PROXY_NAME=localhost
      - ATL_PROXY_PORT=8090
      - CATALINA_CONNECTOR_PROXYNAME=localhost
      - CATALINA_CONNECTOR_PROXYPORT=8090
    networks:
      - app_network
    depends_on:
      confluence-postgres:
          condition: service_healthy
    restart: unless-stopped

  postgres:
    image: postgres:13-alpine
    container_name: postgres
    environment:
      - POSTGRES_USER=jira
      - POSTGRES_PASSWORD=jira
      - POSTGRES_DB=jira
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app_network
    healthcheck:
        test: ["CMD-SHELL", "pg_isready -U jira -d jira"]
        interval: 10s
        timeout: 5s
        retries: 5

  confluence-postgres:
    image: postgres:13-alpine
    container_name: confluence-postgres
    environment:
      - POSTGRES_USER=confluence
      - POSTGRES_PASSWORD=confluence
      - POSTGRES_DB=confluence
    volumes:
      - confluence_postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U confluence -d confluence"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  jira_data:
  postgres_data:
  confluence-data:
  confluence_postgres_data:

networks:
  app_network:
    driver: bridge
