import os
import requests
from fastapi import HTTPException
from app.core.config import settings

OPENROUTER_API_KEY = settings.OPENROUTER_API_KEY
OPENROUTER_API_URL = settings.OPENROUTER_API_URL
OPENROUTER_MODEL = settings.OPENROUTER_MODEL

# Recommended: Set your app's site URL and name for OpenRouter headers
YOUR_SITE_URL = settings.YOUR_SITE_URL
YOUR_APP_NAME = settings.YOUR_APP_NAME

def call_openrouter_api(prompt: str, model: str = None) -> str:
    """
    Calls the OpenRouter API to get a completion for the given prompt.

    Args:
        prompt: The input prompt for the LLM.
        model: The model to use (default: value from config OPENROUTER_MODEL).

    Returns:
        The content of the LLM's response.

    Raises:
        HTTPException: If the API key is missing or the API call fails.
    """
    if not OPENROUTER_API_KEY:
        print("Error: OPENROUTER_API_KEY environment variable not set.")
        raise HTTPException(status_code=500, detail="OpenRouter API key not configured.")

    if model is None:
        model = OPENROUTER_MODEL

    try:
        response = requests.post(
            url=OPENROUTER_API_URL,
            headers={
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "HTTP-Referer": YOUR_SITE_URL, # Optional, for OpenRouter analytics
                "X-Title": YOUR_APP_NAME, # Optional, for OpenRouter analytics
                "Content-Type": "application/json"
            },
            json={
                "model": model,
                "messages": [
                    {"role": "system", "content": "You are a helpful assistant summarizing technical support information. Provide a concise summary or key action points based on the provided context."},
                    {"role": "user", "content": prompt}
                ]
            }
        )

        response.raise_for_status()  # Raise an exception for bad status codes (4xx or 5xx)

        data = response.json()

        if data.get("choices") and len(data["choices"]) > 0:
            # Extract the message content
            message_content = data["choices"][0].get("message", {}).get("content", "")
            return message_content.strip()
        else:
            print(f"Warning: No choices returned from OpenRouter API. Response: {data}")
            return "LLM did not provide a summary."

    except requests.exceptions.RequestException as e:
        print(f"Error calling OpenRouter API: {e}")
        # Check for specific status codes if needed, e.g., 401 for auth errors
        status_code = 500
        detail = f"Failed to communicate with OpenRouter API: {e}"
        if e.response is not None:
            status_code = e.response.status_code
            try:
                error_detail = e.response.json().get('error', {}).get('message', str(e))
                detail = f"OpenRouter API Error ({status_code}): {error_detail}"
            except ValueError: # Handle cases where response is not JSON
                detail = f"OpenRouter API Error ({status_code}): {e.response.text}"

        raise HTTPException(status_code=status_code, detail=detail)
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
        raise HTTPException(status_code=500, detail=f"An unexpected error occurred while processing LLM request: {e}")


def generate_summary_from_results(results: list) -> str:
    """
    Generates a prompt from the top search results and calls the LLM.

    Args:
        results: A list of search result dictionaries.

    Returns:
        The summary generated by the LLM.
    """
    if not results:
        return ""

    # Take top N results (configurable, file-backed)
    top_results = results[:settings.LLM_TOP_RESULTS]

    # Construct prompt
    prompt_context = "Based on the following top search results, please provide a concise summary or key action points:\n\n"
    for i, result in enumerate(top_results):
        title = result.get('title', 'N/A')
        content_snippet = result.get('content', result.get('summary', ''))[:1000] # Limit content length
        source_type = result.get('type', 'Unknown').replace('_', ' ').title()
        score = result.get('similarity_score', 0)

        prompt_context += f"Result {i+1} (Type: {source_type}, Score: {score:.2f}):\n"
        prompt_context += f"Title: {title}\n"
        prompt_context += f"Content Snippet: {content_snippet}...\n"
        # Add Jira comments if present
        if source_type == 'Jira' and 'comments' in result and result['comments']:
            prompt_context += "Comments:\n"
            for comment in result['comments']:
                author = comment.get('author', 'Unknown')
                created = comment.get('created', '')
                body = comment.get('body', '')[:300]
                prompt_context += f"- [{author} at {created}]: {body}...\n"
        prompt_context += "\n"

    try:
        summary = call_openrouter_api(prompt_context)
        return summary
    except HTTPException as e:
        # Log the error or handle it as needed, maybe return an error message
        print(f"LLM Service Error: {e.detail}")
        return f"Error generating summary: {e.detail}"
    except Exception as e:
        print(f"Unexpected error in LLM generation: {e}")
        return "Error: Could not generate summary due to an unexpected issue."

# Example usage (for testing)
if __name__ == "__main__":
    # Mock results for testing
    mock_results = [
        {
            "type": "vector_issue",
            "title": "Login fails after password reset",
            "content": "User reports being unable to log in after successfully resetting their password. Error message 'Invalid credentials' displayed. Checked logs, password hash updated correctly. Suspect cache issue on client side.",
            "similarity_score": 0.95
        },
        {
            "type": "confluence",
            "title": "Troubleshooting Login Issues",
            "content": "Common login problems include incorrect username/password, locked accounts, and browser cache/cookies. Steps to resolve: 1. Verify credentials. 2. Try incognito mode. 3. Clear cache and cookies. 4. Contact support if issues persist.",
            "similarity_score": 0.88,
            "url": "https://confluence.example.com/display/KB/Troubleshooting+Login+Issues"
        },
        {
            "type": "stackoverflow",
            "title": "Flask login not working after password change",
            "content": "My Flask app uses Flask-Login. When a user changes their password, they can't log back in immediately. I'm updating the password hash in the database correctly. Is there a session issue?",
            "similarity_score": 0.85,
            "url": "https://stackoverflow.com/questions/12345/flask-login-not-working"
        }
    ]

    print("--- Generating Summary --- ")
    summary = generate_summary_from_results(mock_results)
    print("\n--- LLM Summary --- ")
    print(summary)